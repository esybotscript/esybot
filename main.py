#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ESYBOT –§–ò–ù–ê–õ–¨–ù–´–ô WIKI-–°–û–í–ú–ï–°–¢–ò–ú–´–ô –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¢–û–†
‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã Python –±–ª–æ–∫–∏ ‚úÖ 100% Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
"""

import asyncio
import sys
import os
import re
import random
import datetime
import json
import math
import time
from typing import Dict, List, Any, Optional, Tuple, Union

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

class FinalESYBOTInterpreter:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π ESYBOT –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å –ø–æ–ª–Ω–æ–π Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""
    
    def __init__(self, debug_mode: bool = False):
        self.debug = debug_mode
        self.bot_token = ""
        self.variables: Dict[str, Any] = {}
        self.handlers: List[Dict] = []
        self.keyboards: Dict[str, Any] = {}
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        
    def debug_print(self, message: str) -> None:
        if self.debug:
            print(message)
    
    def parse_file(self, filename: str) -> bool:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"üìù –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {filename}")
            self._parse_content(content)
            print(f"‚úÖ Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω:")
            print(f"   üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.handlers)}")
            print(f"   ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä: {len(self.keyboards)}")
            print(f"   üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.variables)}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return False
    
    def _parse_content(self, content: str) -> None:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        lines = content.split('\n')
        i = 0
        
        while i < len(lines):
            line = lines[i].strip()
            
            if not line or line.startswith('#') or line.startswith('//'):
                i += 1
                continue
            
            try:
                if line.startswith('bot_token'):
                    self._parse_bot_token(line)
                elif line.startswith('set '):
                    self._parse_variable(line)
                elif line.startswith('menu '):
                    menu_data, next_i = self._parse_menu(lines, i)
                    if menu_data:
                        self.keyboards[menu_data['name']] = self._create_inline_keyboard(menu_data)
                        print(f"‚å®Ô∏è –°–æ–∑–¥–∞–Ω–æ inline –º–µ–Ω—é: {menu_data['name']}")
                    i = next_i
                    continue
                elif line.startswith('keyboard '):
                    keyboard_data, next_i = self._parse_keyboard(lines, i)
                    if keyboard_data:
                        self.keyboards[keyboard_data['name']] = self._create_reply_keyboard(keyboard_data)
                        print(f"‚å®Ô∏è –°–æ–∑–¥–∞–Ω–∞ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard_data['name']}")
                    i = next_i
                    continue
                elif line.startswith('on_'):
                    handler_data, next_i = self._parse_handler(lines, i)
                    if handler_data:
                        self.handlers.append(handler_data)
                        print(f"üéØ –°–æ–∑–¥–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: {handler_data['type']} {handler_data['arg']}")
                    i = next_i
                    continue
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i+1}: {e}")
            
            i += 1
    
    def _parse_bot_token(self, line: str) -> None:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∫–µ–Ω–∞"""
        match = re.search(r'"([^"]*)"', line)
        if match:
            self.bot_token = match.group(1)
            print(f"üîë –ù–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    
    def _parse_variable(self, line: str) -> None:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        try:
            var_part = line[4:].strip()
            space_idx = var_part.find(' ')
            if space_idx == -1:
                return
            
            name = var_part[:space_idx]
            value_str = var_part[space_idx+1:].strip()
            
            if value_str.startswith('"') and value_str.endswith('"'):
                value = value_str[1:-1]
            elif value_str.startswith("'") and value_str.endswith("'"):
                value = value_str[1:-1]
            elif value_str.isdigit():
                value = int(value_str)
            elif value_str.replace('.', '', 1).isdigit():
                value = float(value_str)
            elif value_str.lower() in ['true', 'false']:
                value = value_str.lower() == 'true'
            else:
                value = value_str
            
            self.variables[name] = value
            print(f"üìä –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {name} = {value}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {e}")
    
    def _parse_menu(self, lines: List[str], start: int) -> Tuple[Optional[Dict], int]:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ inline –º–µ–Ω—é"""
        try:
            menu_line = lines[start].strip()
            
            if menu_line.endswith('{'):
                parts = menu_line[:-1].strip().split()
            else:
                parts = menu_line.split()
            
            if len(parts) < 2:
                return None, start + 1
            
            menu_name = parts[1]
            self.debug_print(f"üîß –ü–∞—Ä—Å–∏–Ω–≥ –º–µ–Ω—é: {menu_name}")
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
            i = start + 1
            if not menu_line.endswith('{'):
                while i < len(lines) and lines[i].strip() != '{':
                    i += 1
                if i >= len(lines):
                    return None, start + 1
                i += 1
            
            # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
            buttons = []
            while i < len(lines) and lines[i].strip() != '}':
                line = lines[i].strip()
                if line.startswith('button '):
                    button_info = self._parse_button(line)
                    if button_info:
                        buttons.append(button_info)
                        self.debug_print(f"   üîò –ö–Ω–æ–ø–∫–∞: {button_info['text']} -> {button_info.get('data', 'N/A')}")
                i += 1
            
            menu_data = {
                'type': 'inline',
                'name': menu_name,
                'buttons': buttons
            }
            
            return menu_data, i + 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–µ–Ω—é: {e}")
            return None, start + 1
    
    def _parse_keyboard(self, lines: List[str], start: int) -> Tuple[Optional[Dict], int]:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        try:
            keyboard_line = lines[start].strip()
            
            if keyboard_line.endswith('{'):
                parts = keyboard_line[:-1].strip().split()
            else:
                parts = keyboard_line.split()
            
            if len(parts) < 2:
                return None, start + 1
            
            keyboard_name = parts[1]
            
            i = start + 1
            if not keyboard_line.endswith('{'):
                while i < len(lines) and lines[i].strip() != '{':
                    i += 1
                if i >= len(lines):
                    return None, start + 1
                i += 1
            
            buttons = []
            while i < len(lines) and lines[i].strip() != '}':
                line = lines[i].strip()
                if line.startswith('button '):
                    button_info = self._parse_button(line)
                    if button_info:
                        buttons.append(button_info)
                i += 1
            
            keyboard_data = {
                'type': 'reply',
                'name': keyboard_name,
                'buttons': buttons
            }
            
            return keyboard_data, i + 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
            return None, start + 1
    
    def _parse_handler(self, lines: List[str], start: int) -> Tuple[Optional[Dict], int]:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        try:
            handler_line = lines[start].strip()
            
            if handler_line.endswith('{'):
                parts = handler_line[:-1].strip().split()
            else:
                parts = handler_line.split()
            
            if not parts:
                return None, start + 1
            
            handler_type = parts[0]
            handler_arg = parts[1] if len(parts) > 1 else ""
            
            self.debug_print(f"üîß –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {handler_type} {handler_arg}")
            
            i = start + 1
            if not handler_line.endswith('{'):
                while i < len(lines) and lines[i].strip() != '{':
                    i += 1
                if i >= len(lines):
                    return None, start + 1
                i += 1
            
            commands = []
            while i < len(lines) and lines[i].strip() != '}':
                line = lines[i].strip()
                
                if line and not line.startswith('#'):
                    if line == 'python {':
                        python_code, python_end = self._parse_python_block(lines, i)
                        if python_code:
                            commands.append({'type': 'python', 'code': python_code})
                        i = python_end
                        continue
                    else:
                        commands.append({'type': 'command', 'line': line})
                
                i += 1
            
            handler_data = {
                'type': handler_type,
                'arg': handler_arg,
                'commands': commands
            }
            
            return handler_data, i + 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {e}")
            return None, start + 1
    
    def _parse_button(self, line: str) -> Optional[Dict[str, Any]]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –∫–Ω–æ–ø–∫–∏"""
        try:
            quotes = re.findall(r'"([^"]*)"', line)
            
            if len(quotes) < 1:
                return None
            
            button_info = {
                'text': quotes[0],
                'new_row': 'new_row=true' in line or 'new_row' in line
            }
            
            if 'url=' in line:
                url_match = re.search(r'url="([^"]*)"', line)
                if url_match:
                    button_info['url'] = url_match.group(1)
            elif len(quotes) >= 2:
                button_info['data'] = quotes[1]
            else:
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                safe_data = quotes[0].lower().replace(' ', '_')
                safe_data = re.sub(r'[üéØüé≤üêçüåêüìäüÜòüè†‚ùìüìûüì∑üìÑüé§üòÄ]', '', safe_data)
                safe_data = re.sub(r'[^\w_-]', '', safe_data)
                button_info['data'] = safe_data or 'button'
            
            return button_info
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–Ω–æ–ø–∫–∏: {e}")
            return None
    
    def _parse_python_block(self, lines: List[str], start: int) -> Tuple[str, int]:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —É–º–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Python –±–ª–æ–∫–æ–≤"""
        try:
            code_lines = []
            i = start + 1
            brace_balance = 0
            
            while i < len(lines):
                line = lines[i]
                stripped = line.strip()
                
                line_open_braces = stripped.count('{')
                line_close_braces = stripped.count('}')
                brace_balance += line_open_braces - line_close_braces
                
                if stripped == '}' and brace_balance <= 0:
                    break
                
                code_lines.append(line.rstrip())
                i += 1
            
            while code_lines and not code_lines[0].strip():
                code_lines.pop(0)
            while code_lines and not code_lines[-1].strip():
                code_lines.pop()
            
            return '\n'.join(code_lines), i + 1
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Python –±–ª–æ–∫–∞: {e}")
            return "", start + 1

    def _create_inline_keyboard(self, menu_data: Dict) -> InlineKeyboardMarkup:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        builder = InlineKeyboardBuilder()
        
        for btn in menu_data['buttons']:
            try:
                if 'url' in btn:
                    builder.button(text=btn['text'], url=btn['url'])
                    self.debug_print(f"   ‚úÖ URL –∫–Ω–æ–ø–∫–∞: {btn['text']} -> {btn['url']}")
                else:
                    callback_data = btn['data']
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data –¥–æ 64 –±–∞–π—Ç
                    if len(callback_data.encode('utf-8')) > 64:
                        callback_data = callback_data[:60] + str(hash(callback_data) % 1000)
                    
                    builder.button(text=btn['text'], callback_data=callback_data)
                    self.debug_print(f"   ‚úÖ Callback –∫–Ω–æ–ø–∫–∞: {btn['text']} -> {callback_data}")
                
                if btn.get('new_row', False):
                    builder.row()
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ {btn.get('text', 'N/A')}: {e}")
        
        return builder.as_markup()
    
    def _create_reply_keyboard(self, keyboard_data: Dict) -> ReplyKeyboardMarkup:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        builder = ReplyKeyboardBuilder()
        
        for btn in keyboard_data['buttons']:
            builder.button(text=btn['text'])
            if btn.get('new_row', False):
                builder.row()
        
        return builder.as_markup(resize_keyboard=True)
    
    async def _execute_commands(self, commands: List[Dict], context: Dict[str, Any]) -> None:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"""
        for cmd in commands:
            try:
                if cmd['type'] == 'python':
                    await self._execute_python_code(cmd['code'], context)
                elif cmd['type'] == 'command':
                    await self._execute_esybot_command(cmd['line'], context)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def _execute_python_code(self, code: str, context: Dict[str, Any]) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞ —Å ESYBOT —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        try:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç—Å—Ç—É–ø—ã Python –∫–æ–¥–∞
            normalized_code = self._normalize_python_code(code)
            
            if not normalized_code.strip():
                self.debug_print("   ‚ö†Ô∏è Python –±–ª–æ–∫ –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return
            
            self.debug_print(f"   üêç –í—ã–ø–æ–ª–Ω—è–µ–º Python –∫–æ–¥ ({len(normalized_code.split())} —Å—Ç—Ä–æ–∫)")
            
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º ESYBOT —Ñ—É–Ω–∫—Ü–∏–∏
            def esybot_set(var_name: str, value: Any) -> None:
                """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ESYBOT"""
                self.variables[var_name] = value
                
            def esybot_get(var_name: str, default: Any = None) -> Any:
                """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ESYBOT"""
                return self.variables.get(var_name, default)
                
            def esybot_increment(var_name: str, amount: int = 1) -> None:
                """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ESYBOT"""
                if var_name in self.variables:
                    try:
                        self.variables[var_name] += amount
                    except:
                        self.variables[var_name] = amount
                else:
                    self.variables[var_name] = amount
                    
            def esybot_decrement(var_name: str, amount: int = 1) -> None:
                """–£–º–µ–Ω—å—à–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ESYBOT"""
                if var_name in self.variables:
                    try:
                        self.variables[var_name] -= amount
                    except:
                        self.variables[var_name] = -amount
                else:
                    self.variables[var_name] = -amount
            
            async def esybot_send(text: str, chat_id: int = None, keyboard: str = None, parse_mode: str = None) -> None:
                """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Python –±–ª–æ–∫–∞"""
                target_chat = chat_id or context.get('chat_id')
                reply_markup = None
                
                if keyboard and keyboard in self.keyboards:
                    reply_markup = self.keyboards[keyboard]
                    
                await self.bot.send_message(
                    chat_id=target_chat,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=parse_mode
                )
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è Python –∫–æ–¥–∞
            local_vars = {
                **context,
                **self.variables,
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
                'bot': self.bot,
                'random': random,
                'datetime': datetime,
                'json': json,
                'os': os,
                're': re,
                'math': math,
                'time': time,
                # ESYBOT —Ñ—É–Ω–∫—Ü–∏–∏
                'esybot_set': esybot_set,
                'esybot_get': esybot_get,
                'esybot_increment': esybot_increment,
                'esybot_decrement': esybot_decrement,
                'esybot_send': esybot_send,
                # –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                'set_var': esybot_set,
                'get_var': esybot_get,
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π Python –∫–æ–¥
            exec(normalized_code, {'__builtins__': __builtins__}, local_vars)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ESYBOT (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä—è–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            updated_vars = []
            for var_name in list(self.variables.keys()):
                if var_name in local_vars and local_vars[var_name] != self.variables[var_name]:
                    self.variables[var_name] = local_vars[var_name]
                    updated_vars.append(f"{var_name}={local_vars[var_name]}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            excluded_vars = {
                'bot', 'random', 'datetime', 'json', 'os', 're', 'math', 'time', '__builtins__',
                'esybot_set', 'esybot_get', 'esybot_increment', 'esybot_decrement', 'esybot_send',
                'set_var', 'get_var'
            }
            new_vars = []
            for key, value in local_vars.items():
                if key not in context and key not in excluded_vars and key not in self.variables:
                    self.variables[key] = value
                    new_vars.append(f"{key}={value}")
            
            self.debug_print(f"   ‚úÖ Python –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            if updated_vars:
                self.debug_print(f"      üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(updated_vars)}")
            if new_vars:
                self.debug_print(f"      üìä –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(new_vars)}")
            
        except NameError as e:
            print(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Python –∫–æ–¥–µ: {e}")
            print(f"   üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ ESYBOT —Ñ—É–Ω–∫—Ü–∏–∏:")
            print(f"      ‚Ä¢ esybot_set('var_name', value) - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            print(f"      ‚Ä¢ esybot_get('var_name') - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            print(f"      ‚Ä¢ esybot_increment('var_name') - —É–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            print(f"      ‚Ä¢ esybot_decrement('var_name') - —É–º–µ–Ω—å—à–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é")
            print(f"      ‚Ä¢ await esybot_send('text', keyboard='name') - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
            if self.debug:
                print(f"   üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥:")
                for i, line in enumerate(code.split('\n'), 1):
                    print(f"   {i:2d}: {line}")
        except SyntaxError as e:
            print(f"‚ùå –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Python –∫–æ–¥–µ: {e}")
            print(f"   üìç –°—Ç—Ä–æ–∫–∞ {e.lineno}: {e.text}")
            if self.debug:
                print(f"   üìù –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:")
                for i, line in enumerate(code.split('\n'), 1):
                    marker = " >>> " if i == e.lineno else "     "
                    print(f"   {i:2d}{marker}{repr(line)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞: {e}")
            if self.debug:
                print(f"   üìù –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥:")
                for i, line in enumerate(code.split('\n'), 1):
                    print(f"   {i:2d}: {repr(line)}")
                import traceback
                traceback.print_exc()

    def _normalize_python_code(self, code: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤ Python –∫–æ–¥–∞ –¥–ª—è exec()"""
        try:
            lines = code.split('\n')
            
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
            while lines and not lines[0].strip():
                lines.pop(0)
            while lines and not lines[-1].strip():
                lines.pop()
            
            if not lines:
                return ""
            
            # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —Å—Ä–µ–¥–∏ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            min_indent = float('inf')
            for line in lines:
                if line.strip():  # –¢–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    indent = len(line) - len(line.lstrip())
                    min_indent = min(min_indent, indent)
            
            # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if min_indent == 0 or min_indent == float('inf'):
                normalized = '\n'.join(lines)
                self.debug_print(f"   üîß Python –∫–æ–¥ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω")
                return normalized
            
            # –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø —É –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
            normalized_lines = []
            for line in lines:
                if line.strip():  # –ù–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    normalized_lines.append(line[min_indent:])
                else:  # –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    normalized_lines.append("")
            
            result = '\n'.join(normalized_lines)
            
            self.debug_print(f"   üîß Python –∫–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (—É–±—Ä–∞–Ω –æ—Ç—Å—Ç—É–ø {min_indent} –ø—Ä–æ–±–µ–ª–æ–≤)")
            
            return result
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Python –∫–æ–¥–∞: {e}")
            return code
    
    async def _execute_esybot_command(self, line: str, context: Dict[str, Any]) -> None:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ESYBOT –∫–æ–º–∞–Ω–¥"""
        line = line.strip()
        
        if line.startswith('send '):
            await self._execute_send_command(line, context)
        elif line.startswith('reply '):
            await self._execute_reply_command(line, context)
        elif line.startswith('edit '):
            await self._execute_edit_command(line, context)
        elif line.startswith('answer_callback '):
            await self._execute_answer_callback_command(line, context)
        elif line.startswith('increment '):
            self._execute_increment_command(line)
        elif line.startswith('decrement '):
            self._execute_decrement_command(line)
        elif line.startswith('set '):
            await self._execute_set_command(line, context)
    
    async def _execute_send_command(self, line: str, context: Dict[str, Any]) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã send"""
        try:
            match = re.search(r'"([^"]*)"', line)
            if not match:
                return
            
            text = match.group(1)
            text = self._replace_variables(text, context)
            
            reply_markup = None
            parse_mode = None
            
            if 'keyboard=' in line:
                keyboard_match = re.search(r'keyboard=(\w+)', line)
                if keyboard_match:
                    kb_name = keyboard_match.group(1)
                    if kb_name in self.keyboards:
                        reply_markup = self.keyboards[kb_name]
                        self.debug_print(f"   üì± –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {kb_name}")
            
            if 'parse_mode=' in line:
                parse_mode_match = re.search(r'parse_mode="([^"]*)"', line)
                if parse_mode_match:
                    parse_mode = parse_mode_match.group(1)
            
            await self.bot.send_message(
                chat_id=context['chat_id'],
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            
            self.debug_print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã send: {e}")
    
    async def _execute_reply_command(self, line: str, context: Dict[str, Any]) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã reply"""
        try:
            match = re.search(r'"([^"]*)"', line)
            if not match:
                return
            
            text = match.group(1)
            text = self._replace_variables(text, context)
            
            update = context.get('update')
            if update and hasattr(update, 'reply'):
                await update.reply(text)
            elif update and hasattr(update, 'message') and update.message:
                await update.message.reply(text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã reply: {e}")
    
    async def _execute_edit_command(self, line: str, context: Dict[str, Any]) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã edit"""
        try:
            match = re.search(r'"([^"]*)"', line)
            if not match:
                return
            
            text = match.group(1)
            text = self._replace_variables(text, context)
            
            parse_mode = None
            if 'parse_mode=' in line:
                parse_mode_match = re.search(r'parse_mode="([^"]*)"', line)
                if parse_mode_match:
                    parse_mode = parse_mode_match.group(1)
            
            reply_markup = None
            if 'keyboard=' in line:
                keyboard_match = re.search(r'keyboard=(\w+)', line)
                if keyboard_match:
                    kb_name = keyboard_match.group(1)
                    if kb_name in self.keyboards:
                        reply_markup = self.keyboards[kb_name]
            
            update = context.get('update')
            if update and isinstance(update, CallbackQuery):
                await update.message.edit_text(
                    text=text, 
                    parse_mode=parse_mode,
                    reply_markup=reply_markup
                )
                self.debug_print(f"   ‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: {text[:50]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã edit: {e}")
    
    async def _execute_answer_callback_command(self, line: str, context: Dict[str, Any]) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã answer_callback"""
        try:
            match = re.search(r'"([^"]*)"', line)
            text = match.group(1) if match else ""
            text = self._replace_variables(text, context)
            
            show_alert = 'alert=true' in line
            
            update = context.get('update')
            if update and isinstance(update, CallbackQuery):
                await update.answer(text=text, show_alert=show_alert)
                self.debug_print(f"   üìù Callback –æ—Ç–≤–µ—Ç: {text}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã answer_callback: {e}")
    
    async def _execute_set_command(self, line: str, context: Dict[str, Any]) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã set"""
        try:
            parts = line.split(' ', 2)
            if len(parts) >= 3:
                var_name = parts[1]
                var_value = parts[2].strip()
                
                if var_value.startswith('"') and var_value.endswith('"'):
                    var_value = var_value[1:-1]
                    var_value = self._replace_variables(var_value, context)
                    self.variables[var_name] = var_value
                else:
                    try:
                        if var_value.isdigit():
                            self.variables[var_name] = int(var_value)
                        elif var_value.replace('.', '', 1).isdigit():
                            self.variables[var_name] = float(var_value)
                        else:
                            self.variables[var_name] = var_value
                    except:
                        self.variables[var_name] = var_value
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã set: {e}")
    
    def _execute_increment_command(self, line: str) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã increment"""
        parts = line.split()
        if len(parts) > 1:
            var_name = parts[1]
            if var_name in self.variables:
                try:
                    self.variables[var_name] += 1
                except:
                    self.variables[var_name] = 1
    
    def _execute_decrement_command(self, line: str) -> None:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã decrement"""
        parts = line.split()
        if len(parts) > 1:
            var_name = parts[1]
            if var_name in self.variables:
                try:
                    self.variables[var_name] -= 1
                except:
                    self.variables[var_name] = -1
    
    def _replace_variables(self, text: str, context: Dict[str, Any]) -> str:
        """Wiki-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –∑–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        # –ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ESYBOT
        for var_name, var_value in self.variables.items():
            text = text.replace(f'${var_name}', str(var_value))
        
        # –ó–∞–º–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        text = text.replace('$user_id', str(context.get('user_id', 0)))
        text = text.replace('$chat_id', str(context.get('chat_id', 0)))
        text = text.replace('$first_name', str(context.get('first_name', '')))
        text = text.replace('$username', str(context.get('username', '')))
        text = text.replace('$text', str(context.get('text', '')))
        text = text.replace('$data', str(context.get('data', '')))
        
        return text
    
    async def _create_handler(self, handler_data: Dict) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        handler_type = handler_data['type']
        handler_arg = handler_data['arg']
        commands = handler_data['commands']
        
        async def handler_func(update: Union[Message, CallbackQuery], state: FSMContext = None):
            try:
                # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                context = {
                    'update': update,
                    'user_id': 0,
                    'first_name': '',
                    'username': '',
                    'text': '',
                    'data': '',
                    'chat_id': 0,
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø update –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if isinstance(update, CallbackQuery):
                    context.update({
                        'user_id': update.from_user.id,
                        'first_name': update.from_user.first_name or '',
                        'username': f"@{update.from_user.username}" if update.from_user.username else '',
                        'chat_id': update.message.chat.id if update.message else update.from_user.id,
                        'text': update.data or '',
                        'data': update.data or '',
                    })
                    print(f"üî• CALLBACK: {handler_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context['user_id']}, data: '{context['data']}'")
                    
                elif isinstance(update, Message):
                    context.update({
                        'user_id': update.from_user.id if update.from_user else 0,
                        'first_name': update.from_user.first_name or '' if update.from_user else '',
                        'username': f"@{update.from_user.username}" if update.from_user and update.from_user.username else '',
                        'chat_id': update.chat.id,
                        'text': update.text or '',
                        'data': '',
                    })
                    print(f"üî• MESSAGE: {handler_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {context['user_id']}, —Ç–µ–∫—Å—Ç: '{context['text'][:50]}'")
                
                # –í–´–ü–û–õ–ù–Ø–ï–ú –ö–û–ú–ê–ù–î–´
                await self._execute_commands(commands, context)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ {handler_type}: {e}")
                import traceback
                traceback.print_exc()
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        if handler_type == 'on_start':
            self.dp.message.register(handler_func, Command(commands=["start"]))
        elif handler_type == 'on_message':
            if handler_arg:
                self.dp.message.register(handler_func, F.text == handler_arg)
            else:
                self.dp.message.register(handler_func, F.text)
        elif handler_type == 'on_command':
            if handler_arg:
                self.dp.message.register(handler_func, Command(commands=[handler_arg]))
        elif handler_type == 'on_callback':
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if handler_arg:
                print(f"üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è: '{handler_arg}'")
                self.dp.callback_query.register(handler_func, F.data == handler_arg)
            else:
                print(f"üîó –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")
                self.dp.callback_query.register(handler_func, F.data)
        elif handler_type == 'on_photo':
            self.dp.message.register(handler_func, F.photo)
        elif handler_type == 'on_video':
            self.dp.message.register(handler_func, F.video)
        elif handler_type == 'on_document':
            self.dp.message.register(handler_func, F.document)
        elif handler_type == 'on_voice':
            self.dp.message.register(handler_func, F.voice)
        elif handler_type == 'on_audio':
            self.dp.message.register(handler_func, F.audio)
        elif handler_type == 'on_sticker':
            self.dp.message.register(handler_func, F.sticker)
        elif handler_type == 'on_contact':
            self.dp.message.register(handler_func, F.contact)
        elif handler_type == 'on_location':
            self.dp.message.register(handler_func, F.location)
    
    async def run_interpreter(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞"""
        if not self.bot_token:
            print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self.bot = Bot(self.bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler_data in self.handlers:
            await self._create_handler(handler_data)
        
        print("üéØ Esybot —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 60)
        print(f"üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.dp.message.handlers)}")
        print(f"üîó –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ callback: {len(self.dp.callback_query.handlers)}")
        print(f"‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä: {len(self.keyboards)}")
        print(f"üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(self.variables)}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        if self.dp.callback_query.handlers:
            print("\nüîò –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
            for handler in self.handlers:
                if handler['type'] == 'on_callback':
                    print(f"   ‚Ä¢ {handler['arg']} -> {len(handler['commands'])} –∫–æ–º–∞–Ω–¥")
        
        try:
            await self.dp.start_polling(self.bot, skip_updates=True)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        finally:
            await self.bot.session.close()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ Esybot Lang")
    print("=" * 70)
    
    debug_mode = '--debug' in sys.argv
    if debug_mode:
        sys.argv.remove('--debug')
    
    if len(sys.argv) < 2:
        print("\nüìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python final_esybot_interpreter.py <—Ñ–∞–π–ª.esi> [--debug]")
        print("üîß --debug - –ø–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        print("   –ß–µ–Ω–∂-–ª–æ–≥")
        print("   üêç Python –±–ª–æ–∫–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (esybot_set, esybot_get, esybot_send)")
        print("   üìä –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏—Ö –∑–∞–º–µ–Ω–∞ ($variable)")
        print("   üéØ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (on_start, on_message, on_callback, –º–µ–¥–∏–∞)")
        print("   üìù –í—Å–µ –∫–æ–º–∞–Ω–¥—ã (send, reply, edit, answer_callback)")
        print("   ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å new_row, URL –∫–Ω–æ–ø–∫–∞–º–∏")
        print("   üé® Parse mode (Markdown, HTML)")
        print("   ‚ö° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    interpreter = FinalESYBOTInterpreter(debug_mode=debug_mode)
    
    try:
        if not interpreter.parse_file(sys.argv[1]):
            return
        
        if not interpreter.bot_token or interpreter.bot_token == "YOUR_TOKEN_HERE":
            print("‚ùå –£–°–¢–ê–ù–û–í–ò–¢–ï –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù –ë–û–¢–ê!")
            print("   –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –≤ —Ñ–∞–π–ª–µ .esi")
            return
        
        asyncio.run(interpreter.run_interpreter())
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
